name: PR Component Generation

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'prompts/components/**'
      - 'prompts/system/**'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      affected-components: ${{ steps.affected-components.outputs.affected-components }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine affected components
        id: affected-components
        run: |
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          
          # Extract component names from changed files
          AFFECTED_COMPONENTS=""
          for FILE in $CHANGED_FILES; do
            if [[ $FILE == prompts/components/* ]]; then
              COMPONENT=$(echo $FILE | cut -d'/' -f3)
              if [[ ! " $AFFECTED_COMPONENTS " =~ " $COMPONENT " ]]; then
                AFFECTED_COMPONENTS="$AFFECTED_COMPONENTS $COMPONENT"
              fi
            fi
          done
          
          # Also consider system prompts changes which affect all components
          if echo "$CHANGED_FILES" | grep -q "prompts/system/"; then
            # Get all component directories
            ALL_COMPONENTS=$(ls -d prompts/components/*/ | cut -d'/' -f3)
            AFFECTED_COMPONENTS="$ALL_COMPONENTS"
          fi
          
          # Trim and format
          AFFECTED_COMPONENTS=$(echo $AFFECTED_COMPONENTS | xargs)
          echo "Components to regenerate: $AFFECTED_COMPONENTS"
          echo "affected-components=$AFFECTED_COMPONENTS" >> $GITHUB_OUTPUT

      - name: Post initial PR comment
        if: steps.affected-components.outputs.affected-components != ''
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const components = '${{ steps.affected-components.outputs.affected-components }}'.split(' ');
            
            let commentBody = '## Component Generation Pending\n\n';
            commentBody += 'The following components will be regenerated when approved:\n\n';
            
            for (const component of components) {
              commentBody += `- ${component}\n`;
            }
            
            commentBody += '\nComponent generation will start after approval in the protected environment.';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

  generate-components:
    needs: detect-changes
    if: needs.detect-changes.outputs.affected-components != ''
    runs-on: ubuntu-latest
    environment: component-generation
    permissions:
      contents: read
      pull-requests: write

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npx nx reset

      - name: Take screenshot of current components
        id: before-screenshots
        run: |
          # Install Playwright
          npx playwright install --with-deps chromium
          
          # Build Storybook as static site
          npx nx build-storybook core
          
          # Install simple HTTP server
          npm install -g http-server
          
          # Start static Storybook in background
          npx http-server dist/storybook/core -p 6006 &
          SERVER_PID=$!
          
          # Wait for server to be ready
          echo "Waiting for Storybook server to start..."
          npx wait-on http://localhost:6006 -t 60000
          
          # Create directory for screenshots
          mkdir -p screenshots/before
          
          # Take screenshots of affected components
          COMPONENTS="${{ needs.detect-changes.outputs.affected-components }}"
          for COMPONENT in $COMPONENTS; do
          # Convert to pascal case for story URL
          PASCAL_CASE=$(echo $COMPONENT | sed -r 's/(^|-)([a-z])/\U\2/g')
          
          # Take screenshot
          echo "Taking screenshot of $PASCAL_CASE before regeneration..."
          npx playwright screenshot --browser chromium \
           --viewport-size=1280,800 \
           "http://localhost:6006/?path=/story/components-$PASCAL_CASE--default" \
           "screenshots/before/$COMPONENT.png" || true
          done
          
          # Kill HTTP server
          kill $SERVER_PID || true

      - name: Generate components
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # Generate only affected components
          COMPONENTS="${{ needs.detect-changes.outputs.affected-components }}"
          for COMPONENT in $COMPONENTS; do
            # Create temporary directory with only this component
            mkdir -p temp_components/$COMPONENT
            cp -r prompts/components/$COMPONENT/* temp_components/$COMPONENT/
          
            # Move temporary directory to replace original
            rm -rf prompts/components/$COMPONENT
            mv temp_components/$COMPONENT prompts/components/
          
            # Run generation for this component
            node scripts/generate-components.js
          done

      - name: Take screenshot of regenerated components
        id: after-screenshots
        run: |
          # Build Storybook again with regenerated components
          npx nx build-storybook core
          
          # Start static Storybook in background
          npx http-server dist/storybook/core -p 6006 &
          SERVER_PID=$!
          
          # Wait for server to be ready
          echo "Waiting for Storybook server to start..."
          npx wait-on http://localhost:6006 -t 60000
          
          # Create directory for screenshots
          mkdir -p screenshots/after
          
          # Take screenshots of affected components
          COMPONENTS="${{ needs.detect-changes.outputs.affected-components }}"
          for COMPONENT in $COMPONENTS; do
          # Convert to pascal case for story URL
          PASCAL_CASE=$(echo $COMPONENT | sed -r 's/(^|-)([a-z])/\U\2/g')
          
          # Take screenshot
          echo "Taking screenshot of $PASCAL_CASE after regeneration..."
          npx playwright screenshot --browser chromium \
           --viewport-size=1280,800 \
           "http://localhost:6006/?path=/story/components-$PASCAL_CASE--default" \
           "screenshots/after/$COMPONENT.png" || true
          done
          
          # Kill HTTP server
          kill $SERVER_PID || true

      - name: Comment on PR with component changes
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const components = '${{ needs.detect-changes.outputs.affected-components }}'.split(' ');
            let commentBody = '## Component Generation Results\n\n';
            
            for (const component of components) {
              commentBody += `### ${component}\n\n`;
            
              const beforePath = path.join('screenshots', 'before', `${component}.png`);
              const afterPath = path.join('screenshots', 'after', `${component}.png`);
            
              if (fs.existsSync(beforePath) && fs.existsSync(afterPath)) {
                // Encode images as base64
                const beforeBase64 = fs.readFileSync(beforePath, { encoding: 'base64' });
                const afterBase64 = fs.readFileSync(afterPath, { encoding: 'base64' });
            
                commentBody += '<table><tr><th>Before</th><th>After</th></tr>\n';
                commentBody += '<tr><td>';
                commentBody += `<img src="data:image/png;base64,${beforeBase64}" width="400" />`;
                commentBody += '</td><td>';
                commentBody += `<img src="data:image/png;base64,${afterBase64}" width="400" />`;
                commentBody += '</td></tr></table>\n\n';
              } else {
                commentBody += 'Screenshots not available for this component.\n\n';
              }
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });