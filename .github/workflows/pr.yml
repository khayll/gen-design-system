name: PR Component Generation

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'prompts/components/**'
      - 'prompts/system/**'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      affected-components: ${{ steps.affected-components.outputs.affected-components }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine affected components
        id: affected-components
        run: |
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          
          # Extract component names from changed files
          AFFECTED_COMPONENTS=""
          NEW_COMPONENTS=""
          
          for FILE in $CHANGED_FILES; do
            if [[ $FILE == prompts/components/* ]]; then
              COMPONENT=$(echo $FILE | cut -d'/' -f3)
          
              # Check if component is new by looking at the base branch
              if ! git ls-tree -r ${{ github.event.pull_request.base.sha }} --name-only | grep -q "prompts/components/$COMPONENT/"; then
                if [[ ! " $NEW_COMPONENTS " =~ " $COMPONENT " ]]; then
                  NEW_COMPONENTS="$NEW_COMPONENTS $COMPONENT"
                fi
              fi
          
              if [[ ! " $AFFECTED_COMPONENTS " =~ " $COMPONENT " ]]; then
                AFFECTED_COMPONENTS="$AFFECTED_COMPONENTS $COMPONENT"
              fi
            fi
          done
          
          # Also consider system prompts changes which affect all components
          if echo "$CHANGED_FILES" | grep -q "prompts/system/"; then
            # Get all component directories
            ALL_COMPONENTS=$(ls -d prompts/components/*/ | cut -d'/' -f3)
            AFFECTED_COMPONENTS="$ALL_COMPONENTS"
          fi
          
          # Trim and format
          AFFECTED_COMPONENTS=$(echo $AFFECTED_COMPONENTS | xargs)
          NEW_COMPONENTS=$(echo $NEW_COMPONENTS | xargs)
          
          echo "Components to regenerate: $AFFECTED_COMPONENTS"
          echo "New components: $NEW_COMPONENTS"
          
          echo "affected-components=$AFFECTED_COMPONENTS" >> $GITHUB_OUTPUT
          echo "new-components=$NEW_COMPONENTS" >> $GITHUB_OUTPUT

      - name: Post initial PR comment
        if: steps.affected-components.outputs.affected-components != ''
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const components = '${{ steps.affected-components.outputs.affected-components }}'.split(' ');
            const newComponents = '${{ steps.affected-components.outputs.new-components }}'.split(' ').filter(c => c);
            
            let commentBody = '## Component Generation Pending\n\n';
            commentBody += 'The following components will be regenerated when approved:\n\n';
            
            for (const component of components) {
              if (newComponents.includes(component)) {
                commentBody += `- ${component} (new component) ðŸ†•\n`;
              } else {
                commentBody += `- ${component}\n`;
              }
            }
            
            commentBody += '\nComponent generation will start after approval in the protected environment.';
            
            if (newComponents.length > 0) {
              commentBody += '## ðŸ†• New Components Added\n\n';
              commentBody += 'The following new components were added in this PR:\n\n';
            
              for (const component of newComponents) {
                commentBody += `- **${component}**: Generated from prompt\n`;
              }
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

  generate-components:
    needs: detect-changes
    if: needs.detect-changes.outputs.affected-components != ''
    runs-on: ubuntu-latest
    environment: component-generation
    permissions:
      contents: read
      pull-requests: write

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npx nx reset

      - name: Take screenshot of current components
        id: before-screenshots
        run: |
          # Install Playwright
          npx playwright install --with-deps chromium
          
          # Build Storybook as static site
          npx nx build-storybook core || true
          
          # Create directory for screenshots and placeholders
          mkdir -p screenshots/before
          mkdir -p screenshots/placeholders
          
          # Create a "New Component" placeholder image for new components
          echo "Creating placeholder image for new components..."
          npx playwright screenshot --browser chromium \
            --viewport-size=1280,800 \
            "data:text/html,<html><body style='display:flex;justify-content:center;align-items:center;height:100vh;background:#f5f5f5;'><div style='text-align:center;font-family:system-ui;'><h1 style='font-size:32px;color:#333;'>New Component</h1><p style='font-size:18px;color:#666;'>No previous version exists</p></div></body></html>" \
            "screenshots/placeholders/new-component.png" || true
          
          # Only continue with screenshots if we have existing components to update
          if [[ -d "dist/storybook/core" ]]; then
            # Install simple HTTP server
            npm install -g http-server
          
            # Start static Storybook in background
            npx http-server dist/storybook/core -p 6006 &
            SERVER_PID=$!
          
            # Wait for server to be ready
            echo "Waiting for Storybook server to start..."
            npx wait-on http://localhost:6006 -t 60000 || true
          
            # Take screenshots of affected existing components
            COMPONENTS="${{ needs.detect-changes.outputs.affected-components }}"
            NEW_COMPONENTS="${{ needs.detect-changes.outputs.new-components }}"
          
            for COMPONENT in $COMPONENTS; do
              # Skip new components for before screenshots
              if [[ "$NEW_COMPONENTS" == *"$COMPONENT"* ]]; then
                echo "Skipping before screenshot for new component: $COMPONENT"
                # Copy placeholder image
                cp screenshots/placeholders/new-component.png "screenshots/before/$COMPONENT.png"
                continue
              fi
          
              # Convert to pascal case for story URL
              PASCAL_CASE=$(echo $COMPONENT | sed -r 's/(^|-)([a-z])/\U\2/g')
          
              # Take screenshot
              echo "Taking screenshot of $PASCAL_CASE before regeneration..."
              npx playwright screenshot --browser chromium \
                --viewport-size=1280,800 \
                "http://localhost:6006/?path=/story/components-$PASCAL_CASE--default" \
                "screenshots/before/$COMPONENT.png" || echo "Failed to take screenshot of $COMPONENT, will use placeholder"
          
              # If screenshot failed, use placeholder
              if [ ! -f "screenshots/before/$COMPONENT.png" ]; then
                cp screenshots/placeholders/new-component.png "screenshots/before/$COMPONENT.png"
              fi
            done
          
            # Kill HTTP server
            kill $SERVER_PID || true
          else
            # No existing Storybook, use placeholders for all components
            echo "No existing Storybook build found, using placeholders for all components"
            COMPONENTS="${{ needs.detect-changes.outputs.affected-components }}"
            for COMPONENT in $COMPONENTS; do
              cp screenshots/placeholders/new-component.png "screenshots/before/$COMPONENT.png"
            done
          fi

      - name: Generate components
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # Generate only affected components
          COMPONENTS="${{ needs.detect-changes.outputs.affected-components }}"
          for COMPONENT in $COMPONENTS; do
            # Create temporary directory with only this component
            mkdir -p temp_components/$COMPONENT
            cp -r prompts/components/$COMPONENT/* temp_components/$COMPONENT/
          
            # Move temporary directory to replace original
            rm -rf prompts/components/$COMPONENT
            mv temp_components/$COMPONENT prompts/components/
          
            # Run generation for this component
            node scripts/generate-components.js
          done

      - name: Take screenshot of regenerated components
        id: after-screenshots
        run: |
          # Start Storybook in background
          npx nx run core:storybook -- --ci &
          
          # Wait for Storybook to start
          echo "Waiting for Storybook to start..."
          sleep 30
          
          # Create directory for screenshots
          mkdir -p screenshots/after
          
          # Take screenshots of affected components
          COMPONENTS="${{ needs.detect-changes.outputs.affected-components }}"
          for COMPONENT in $COMPONENTS; do
            # Convert to pascal case for story URL
            PASCAL_CASE=$(echo $COMPONENT | sed -r 's/(^|-)([a-z])/\U\2/g')
          
            # Take screenshot
            echo "Taking screenshot of $PASCAL_CASE after regeneration..."
            npx playwright screenshot --browser chromium \
              --viewport-size=1280,800 \
              "http://localhost:6006/?path=/story/components-$PASCAL_CASE--default" \
              "screenshots/after/$COMPONENT.png" || true
          done
          
          # Kill Storybook
          kill $(lsof -t -i:6006) || true

      - name: Comment on PR with component changes
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const components = '${{ needs.detect-changes.outputs.affected-components }}'.split(' ');
            const newComponents = '${{ needs.detect-changes.outputs.new-components }}'.split(' ').filter(c => c);
            
            let commentBody = '## Component Generation Results\n\n';
            
            for (const component of components) {
              if (newComponents.includes(component)) {
                commentBody += `### ${component} ðŸ†• (New Component)\n\n`;
              } else {
                commentBody += `### ${component}\n\n`;
              }
            
              const beforePath = path.join('screenshots', 'before', `${component}.png`);
              const afterPath = path.join('screenshots', 'after', `${component}.png`);
            
              if (fs.existsSync(beforePath) && fs.existsSync(afterPath)) {
                // Encode images as base64
                const beforeBase64 = fs.readFileSync(beforePath, { encoding: 'base64' });
                const afterBase64 = fs.readFileSync(afterPath, { encoding: 'base64' });
            
                commentBody += '<table><tr><th>Before</th><th>After</th></tr>\n';
                commentBody += '<tr><td>';
            
                if (newComponents.includes(component)) {
                  commentBody += 'New component - no previous version';
                } else {
                  commentBody += `<img src="data:image/png;base64,${beforeBase64}" width="400" />`;
                }
            
                commentBody += '</td><td>';
                commentBody += `<img src="data:image/png;base64,${afterBase64}" width="400" />`;
                commentBody += '</td></tr></table>\n\n';
              } else {
                commentBody += 'Screenshots not available for this component.\n\n';
              }
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });