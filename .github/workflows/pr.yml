name: PR Component Generation

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'prompts/components/**'
      - 'prompts/system/**'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      affected-components: ${{ steps.affected-components.outputs.affected-components }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine affected components
        id: affected-components
        run: |
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          
          # Extract component names from changed files
          AFFECTED_COMPONENTS=""
          NEW_COMPONENTS=""
          
          for FILE in $CHANGED_FILES; do
            if [[ $FILE == prompts/components/* ]]; then
              COMPONENT=$(echo $FILE | cut -d'/' -f3)
          
              # Check if component is new by looking at the base branch
              if ! git ls-tree -r ${{ github.event.pull_request.base.sha }} --name-only | grep -q "prompts/components/$COMPONENT/"; then
                if [[ ! " $NEW_COMPONENTS " =~ " $COMPONENT " ]]; then
                  NEW_COMPONENTS="$NEW_COMPONENTS $COMPONENT"
                fi
              fi
          
              if [[ ! " $AFFECTED_COMPONENTS " =~ " $COMPONENT " ]]; then
                AFFECTED_COMPONENTS="$AFFECTED_COMPONENTS $COMPONENT"
              fi
            fi
          done
          
          # Also consider system prompts changes which affect all components
          if echo "$CHANGED_FILES" | grep -q "prompts/system/"; then
            # Get all component directories
            ALL_COMPONENTS=$(ls -d prompts/components/*/ | cut -d'/' -f3)
            AFFECTED_COMPONENTS="$ALL_COMPONENTS"
          fi
          
          # Trim and format
          AFFECTED_COMPONENTS=$(echo $AFFECTED_COMPONENTS | xargs)
          NEW_COMPONENTS=$(echo $NEW_COMPONENTS | xargs)
          
          echo "Components to regenerate: $AFFECTED_COMPONENTS"
          echo "New components: $NEW_COMPONENTS"
          
          echo "affected-components=$AFFECTED_COMPONENTS" >> $GITHUB_OUTPUT
          echo "new-components=$NEW_COMPONENTS" >> $GITHUB_OUTPUT

      - name: Post initial PR comment
        if: steps.affected-components.outputs.affected-components != ''
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const components = '${{ steps.affected-components.outputs.affected-components }}'.split(' ');
            const newComponents = '${{ steps.affected-components.outputs.new-components }}'.split(' ').filter(c => c);
            
            let commentBody = '## Component Generation Pending\n\n';
            commentBody += 'The following components will be regenerated when approved:\n\n';
            
            for (const component of components) {
              if (newComponents.includes(component)) {
                commentBody += `- ${component} (new component) ðŸ†•\n`;
              } else {
                commentBody += `- ${component}\n`;
              }
            }
            
            commentBody += '\nComponent generation will start after approval in the protected environment.';
            
            if (newComponents.length > 0) {
              commentBody += '## ðŸ†• New Components Added\n\n';
              commentBody += 'The following new components were added in this PR:\n\n';
            
              for (const component of newComponents) {
                commentBody += `- **${component}**: Generated from prompt\n`;
              }
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

  generate-components:
    needs: detect-changes
    if: needs.detect-changes.outputs.affected-components != ''
    runs-on: ubuntu-latest
    environment: component-generation
    permissions:
      contents: read
      pull-requests: write

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npx nx reset

      - name: Create screenshot helper script
        run: |
          mkdir -p scripts
          cat > scripts/generate-screenshot-html.js << 'EOF'
          // This script generates a simple HTML file that renders components directly
          const fs = require('fs').promises;
          const path = require('path');
          
          async function generateScreenshotHtml(components, outputFilePath) {
          const htmlTemplate = `
          <!DOCTYPE html>
          <html lang="en">
          <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Component Screenshots</title>
          <style>
          body {
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
          margin: 0;
          padding: 0;
          }
            .component-container {
          padding: 20px;
          margin: 10px;
          border: 1px solid #eaeaea;
          border-radius: 5px;
          }
            .component-title {
          font-size: 18px;
          font-weight: bold;
          margin-bottom: 10px;
          color: #333;
          }
            /* Base styling for components */
            :root {
          --gds-color-primary: #4263eb;
          --gds-color-primary-hover: #364fc7;
          --gds-color-secondary: #868e96;
          --gds-color-secondary-hover: #495057;
          --gds-color-success: #40c057;
          --gds-color-warning: #fcc419;
          --gds-color-danger: #fa5252;
          --gds-color-info: #15aabf;
          --gds-color-light: #f8f9fa;
          --gds-color-dark: #212529;
          }
            </style>
            </head>
            <body>
            <div id="app">
            ${components.map(component => {
            const pascalName = component.split('-').map(part => part.charAt(0).toUpperCase() + part.slice(1)).join('');
            const kebabName = \`gds-${component.toLowerCase()}\`;
            
            return \`
            <div class="component-container" id="${component}">
            <div class="component-title">${pascalName}</div>
            <${kebabName}></${kebabName}>
            </div>\`;
          }).join('')}
            </div>
            
            <!-- Import bundle that contains all components -->
            <script type="module">
            // Import components from the bundled output
            import '/dist/libs/core/index.js';
            
            // Add any initialization code here
            document.addEventListener('DOMContentLoaded', () => {
            console.log('Components loaded');
          });
            </script>
            </body>
            </html>`;
            
            // Ensure the directory exists
            const dir = path.dirname(outputFilePath);
          await fs.mkdir(dir, { recursive: true });
            
            // Write the HTML file
            await fs.writeFile(outputFilePath, htmlTemplate);
            console.log(\`Generated HTML file at ${outputFilePath}\`);
          }
          
            // If called directly from command line
            if (require.main === module) {
            const components = process.argv.slice(2);
            if (components.length === 0) {
            console.error('Please provide component names as arguments');
            process.exit(1);
          }
          
            const outputFilePath = path.join(__dirname, '..', 'screenshots', 'preview.html');
            generateScreenshotHtml(components, outputFilePath)
            .catch(err => {
            console.error('Error generating HTML file:', err);
            process.exit(1);
            });
          }
          
            module.exports = { generateScreenshotHtml };
            EOF
          chmod +x scripts/generate-screenshot-html.js
          echo "Created screenshot helper script"

      - name: Take screenshot of current components
        id: before-screenshots
        run: |
          # Install Playwright
          npx playwright install --with-deps chromium
          
          # Create directory for screenshots and placeholders
          mkdir -p screenshots/before
          mkdir -p screenshots/placeholders
          
          # Create a "New Component" placeholder image for new components
          echo "Creating placeholder image for new components..."
          npx playwright screenshot --browser chromium \
            --viewport-size=1280,800 \
            "data:text/html,<html><body style='display:flex;justify-content:center;align-items:center;height:100vh;background:#f5f5f5;'><div style='text-align:center;font-family:system-ui;'><h1 style='font-size:32px;color:#333;'>New Component</h1><p style='font-size:18px;color:#666;'>No previous version exists</p></div></body></html>" \
            "screenshots/placeholders/new-component.png"
          
          # Create placeholder for components that can't be captured  
          echo "Creating placeholder image for components that couldn't be captured..."
          npx playwright screenshot --browser chromium \
            --viewport-size=1280,800 \
            "data:text/html,<html><body style='display:flex;justify-content:center;align-items:center;height:100vh;background:#f5f5f5;'><div style='text-align:center;font-family:system-ui;'><h1 style='font-size:32px;color:#333;'>Screenshot Failed</h1><p style='font-size:18px;color:#666;'>Component exists but couldn't be captured</p></div></body></html>" \
            "screenshots/placeholders/capture-failed.png"
          
          # For new components, use the placeholder without trying to capture
          NEW_COMPONENTS="${{ needs.detect-changes.outputs.new-components }}"
          for COMPONENT in $NEW_COMPONENTS; do
            echo "Using placeholder for new component: $COMPONENT"
            cp screenshots/placeholders/new-component.png "screenshots/before/$COMPONENT.png"
          done
          
          # For existing components, try to capture screenshots
          EXISTING_COMPONENTS=$(echo "${{ needs.detect-changes.outputs.affected-components }}" | tr ' ' '\n' | grep -v "$NEW_COMPONENTS" | tr '\n' ' ')
          
          if [ -n "$EXISTING_COMPONENTS" ]; then
            echo "Attempting to capture screenshots for existing components: $EXISTING_COMPONENTS"
          
            # Try building the components
            npx nx build core
          
            # Create a simple HTML file to render the components
            node scripts/generate-screenshot-html.js $EXISTING_COMPONENTS
          
            # Install simple HTTP server
            npm install -g http-server
          
            # Start server for the HTML file
            nohup http-server . -p 8000 > http-server.log 2>&1 &
            SERVER_PID=$!
          
            # Wait a moment for server to start
            sleep 5
          
            # Take screenshots for existing components
            for COMPONENT in $EXISTING_COMPONENTS; do
              echo "Taking screenshot of $COMPONENT before regeneration..."
              if npx playwright screenshot --browser chromium \
                --viewport-size=1280,800 \
                "http://localhost:8000/screenshots/preview.html#$COMPONENT" \
                "screenshots/before/$COMPONENT.png"; then
                echo "Screenshot captured successfully for $COMPONENT"
              else
                echo "Failed to capture screenshot for $COMPONENT, using placeholder"
                cp screenshots/placeholders/capture-failed.png "screenshots/before/$COMPONENT.png"
              fi
            done
          
            # Clean up
            if [ -n "$SERVER_PID" ]; then
              echo "Stopping http-server (PID $SERVER_PID)"
              kill $SERVER_PID || echo "Failed to kill server process"
            fi
          else
            echo "No existing components to capture screenshots for"
          fi

      - name: Generate components
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # Generate only affected components
          COMPONENTS="${{ needs.detect-changes.outputs.affected-components }}"
          for COMPONENT in $COMPONENTS; do
            # Create temporary directory with only this component
            mkdir -p temp_components/$COMPONENT
            cp -r prompts/components/$COMPONENT/* temp_components/$COMPONENT/
          
            # Move temporary directory to replace original
            rm -rf prompts/components/$COMPONENT
            mv temp_components/$COMPONENT prompts/components/
          
            # Run generation for this component
            node scripts/generate-components.js
          done

      - name: Take screenshot of regenerated components
        id: after-screenshots
        run: |
          # Start Storybook in background
          npx nx run core:storybook -- --ci &
          
          # Wait for Storybook to start
          echo "Waiting for Storybook to start..."
          sleep 30
          
          # Create directory for screenshots
          mkdir -p screenshots/after
          
          # Take screenshots of affected components
          COMPONENTS="${{ needs.detect-changes.outputs.affected-components }}"
          for COMPONENT in $COMPONENTS; do
            # Convert to pascal case for story URL
            PASCAL_CASE=$(echo $COMPONENT | sed -r 's/(^|-)([a-z])/\U\2/g')
          
            # Take screenshot
            echo "Taking screenshot of $PASCAL_CASE after regeneration..."
            npx playwright screenshot --browser chromium \
              --viewport-size=1280,800 \
              "http://localhost:6006/?path=/story/components-$PASCAL_CASE--default" \
              "screenshots/after/$COMPONENT.png" || true
          done
          
          # Kill Storybook
          kill $(lsof -t -i:6006) || true

      - name: Comment on PR with component changes
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const components = '${{ needs.detect-changes.outputs.affected-components }}'.split(' ');
            const newComponents = '${{ needs.detect-changes.outputs.new-components }}'.split(' ').filter(c => c);
            
            let commentBody = '## Component Generation Results\n\n';
            
            for (const component of components) {
              if (newComponents.includes(component)) {
                commentBody += `### ${component} ðŸ†• (New Component)\n\n`;
              } else {
                commentBody += `### ${component}\n\n`;
              }
            
              const beforePath = path.join('screenshots', 'before', `${component}.png`);
              const afterPath = path.join('screenshots', 'after', `${component}.png`);
            
              if (fs.existsSync(beforePath) && fs.existsSync(afterPath)) {
                // Encode images as base64
                const beforeBase64 = fs.readFileSync(beforePath, { encoding: 'base64' });
                const afterBase64 = fs.readFileSync(afterPath, { encoding: 'base64' });
            
                commentBody += '<table><tr><th>Before</th><th>After</th></tr>\n';
                commentBody += '<tr><td>';
            
                if (newComponents.includes(component)) {
                  commentBody += 'New component - no previous version';
                } else {
                  commentBody += `<img src="data:image/png;base64,${beforeBase64}" width="400" />`;
                }
            
                commentBody += '</td><td>';
                commentBody += `<img src="data:image/png;base64,${afterBase64}" width="400" />`;
                commentBody += '</td></tr></table>\n\n';
              } else {
                commentBody += 'Screenshots not available for this component.\n\n';
              }
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });